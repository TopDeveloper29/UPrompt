{
  "Xml": {
    "Starter": "<Application><View></View></Application>",
    "Application": "<Application></Application>",
    "View": "<View></View>"
  },
  "View": {
    "ViewItem": {
      "Box": {
        "Description": "This element is a box that can take other elment but in it and display border like LabelBox",
        "InnerTextPurpose": "It can contain view and html elements",
        "SupportedProperties": [
          "Id",
          "Style",
          "Class"
        ]
      },
      "Label": {
        "Description": "This element is a simple label that show text",
        "InnerTextPurpose": "The text inside the Xml Element will be used to set the text of the label.",
        "SupportedProperties": [
          "Id",
          "Style",
          "Class"
        ]
      },
      "LabelBox": {
        "Description": "This element is a simple label but with a border that show text",
        "InnerTextPurpose": "The text inside the Xml Element will be used to set the text of the label.",
        "SupportedProperties": [
          "Id",
          "Style",
          "Class"
        ]
      },
      "Title": {
        "Description": "This element is a simple label but of the size of a title that show text",
        "InnerTextPurpose": "The text inside the Xml Element will be used to set the text of the label.",
        "SupportedProperties": [
          "Id",
          "Style",
          "Class"
        ]
      },
      "Row": {
        "Description": "This element is design to contain mutiple element in it (on a same row)",
        "InnerTextPurpose": "It can contain view and html elements",
        "SupportedProperties": [
          "Id",
          "Style",
          "Class"
        ]
      },
      "Spacer": {
        "Description": "This element is design to add a space between 2 element in a row or replace an element more to left or rigth",
        "InnerTextPurpose": "N/A",
        "SupportedProperties": [
          "N/A"
        ]
      }
    },
    "ViewInput": {
      "TextBox": {
        "Description": "This element is a simple TextBox that allows the user to enter text in it.",
        "InnerTextPurpose": "The text inside the Xml Element will be used to set the default value of the textbox.",
        "SupportedProperties": [
          "Id",
          "Style",
          "Class",
          "Action",
          "Arguments"
        ]
      },
      "LinesBox": {
        "Description": "This element is a simple TextBox but with multiple line that allows the user to enter text in it.",
        "InnerTextPurpose": "The text inside the Xml Element will be used to set the default value of the textbox.",
        "SupportedProperties": [
          "Id",
          "Style",
          "Class",
          "Action",
          "Arguments"
        ]
      },
      "CheckBox": {
        "Description": "This element is a simple CheckBox that allows the user to tell if yes or no they want something (true/false value).",
        "InnerTextPurpose": "The text inside the Xml Element will be used to set the label of the checkbox.",
        "SupportedProperties": [
          "Id",
          "Style",
          "Class",
          "Checked",
          "Action",
          "Arguments"
        ]
      },
      "DropDown": {
        "Description": "This element is a DropBox that allows the user to select a value from a list. Using DropList",
        "InnerTextPurpose": "The text inside the Xml Element will be used to set the default value of the dropdown.",
        "SupportedProperties": [
          "Id",
          "Style",
          "Class",
          "Action",
          "DropList",
          "Arguments"
        ]
      }
    },
    "ViewAction": {
      "Button": {
        "Description": "This element is a simple Button that allows the user to run action.",
        "InnerTextPurpose": "The text inside the Xml Element will be used to display text in button",
        "SupportedProperties": [
          "Id",
          "Style",
          "Class",
          "Action",
          "Arguments"
        ]
      },
      "Linker": {
        "Description": "This element is hiddent and should use to tranfert a value from variable to annother at each load",
        "InnerTextPurpose": "N/A",
        "SupportedProperties": [
          "Id",
          "Source",
          "Target"
        ]
      },
      "InputHandler": {
        "Description": "This element is hidden it track change made to input (each built-in input element comme with it by default). The usage are for custom input in html",
        "InnerTextPurpose": "The text inside the Xml Element will be used to define the input id to track",
        "SupportedProperties": [
          "Id",
          "Action",
          "Arguments"
        ]
      },
      "ViewLoad": {
        "Description": "This element is hidden and should use to run action every time the view reload or load (disclaimer that can impact performance of application)",
        "InnerTextPurpose": "N/A",
        "SupportedProperties": [
          "Id",
          "Action",
          "Arguments"
        ]
      },
      "VariableHandler": {
        "Description": "This element is hidden and should be use to track change made to variable.",
        "InnerTextPurpose": "The text inside the Xml Element will be used to define the varaible name to track",
        "SupportedProperties": [
          "Id",
          "Action",
          "Arguments"
        ]
      }
    }
  },
  "Settings": {
    "Application-Color": {
      "Description": "This set the color of application background",
      "Values": [
        "#fffff",
        "#00000"
      ]
    },
    "Text-Color": {
      "Description": "This set the color of application text",
      "Values": [
        "#fffff",
        "#00000"
      ]
    },
    "Accent-Color": {
      "Description": "This set the color of some application element like button",
      "Values": [
        "#fffff",
        "#00000"
      ]
    },
    "Accent-Text-Color": {
      "Description": "This set the color of text of some application element like button",
      "Values": [
        "#fffff",
        "#00000"
      ]
    },
    "Width": {
      "Description": "This set the initial width of the application",
      "Values": [
        "0",
        "2000"
      ]
    },
    "Height": {
      "Description": "This set the initial height of the application",
      "Values": [
        "0",
        "2000"
      ]
    },
    "WindowsResizeMode": {
      "Description": "This define what side the user could grab to resize the windows",
      "Values": [
        "All",
        "Horizontal",
        "Vertical",
        "Diagonal",
        "None"
      ]
    },
    "WindowsOpenMode": {
      "Description": "This set the state of the application windows on start",
      "Values": [
        "Normal",
        "Minimized",
        "Maximized"
      ]
    },
    "Application-Icon": {
      "Description": "This set the icon show in task bar and every where else it could be show",
      "Values": [
        "C:\\PathToIcon\\ApplicationIcon.ico"
      ]
    },
    "Application-Title": {
      "Description": "This set the title od the application windows (show in taskbar and in some action like OkDialog)",
      "Values": [
        "Uprompt"
      ]
    },
    "ShowMinimize": {
      "Description": "This set if the minimize button is show or not",
      "Values": [
        "true",
        "false"
      ]
    },
    "ShowMaximize": {
      "Description": "This set if the maximize button is show or not",
      "Values": [
        "true",
        "false"
      ]
    },
    "ShowClose": {
      "Description": "This set if the close button is show or not",
      "Values": [
        "true",
        "false"
      ]
    },
    "Font": {
      "Description": "This set the font used in application (The font name should exist in css context so if you enter a custom font you must declare it using some CSS)",
      "Values": [
        "Arial",
        "Helvetica",
        "Times New Roman",
        "Verdana",
        "Georgia",
        "Courier New"
      ]
    },
    "Item-Margin": {
      "Description": "This set the default margin in px/% between all view element",
      "Values": [
        "10px",
        "3%"
      ]
    },
    "CSS": {
      "Description": "Path to a css file to add more css code and class to the view",
      "Values": [
        "C:\\PathToACssFile\\FontAndStyle.css"
      ]
    },
    "SkipElementParsing": {
      "Description": "You can define if a element will skip parse some text like variable [NameOfVariable] or system value like {USER}",
      "Values": [
        "Id",
        "1100"
      ]
    },
    "Production": {
      "Description": "This set if the application will show debug information like error and warning",
      "Values": [
        "true",
        "false"
      ]
    },
    "Variable": {
      "Description": "Initialize a variable with a default value to avoid to see [VariableName] if you display it in the ui",
      "Values": [
        "some text",
        "#00000",
        "200",
        "true",
        "false"
      ]
    },
    "OnLoad": {
      "Description": "Define action to run on startup of application",
      "Values": [
        "#fffff",
        "#00000"
      ]
    },
    "Extention": {
      "Description": "Load extention module write in c# (dll file) you could set extention id using Id=\"12\" property",
      "Values": [
        "C:\\PathToExtetion\\Extention.dll,ExtentionNameSpace.ExtentionClass"
      ],
      "Action": {
        "RunMethod": {
          "Description": "It allow to run a method of a extention that are loaded in settings",
          "Arguments": {
            "Id": {
              "Description": "A number that represant the id of a loaded c# extention (from setting Extention)",
              "Mandatory": "true"
            },
            "Method": {
              "Description": "The method to run in the extention like ExtentionMethod(MethodArgument,Argument)",
              "Mandatory": "true"
            }
          }
        },
        "RunPowershell": {
          "Description": "It allow to run a method of a extention that are loaded in settings",
          "Arguments": {
            "Id": {
              "Description": "A number that represant the id of a loaded c# extention (from setting Extention)",
              "Mandatory": "true"
            },
            "Method": {
              "Description": "The method to run in the extention like ExtentionMethod(MethodArgument,Argument)",
              "Mandatory": "true"
            }
          }
        },
        "RunExe": {
          "Description": "It allow to run a method of a extention that are loaded in settings",
          "Arguments": {
            "Id": {
              "Description": "A number that represant the id of a loaded c# extention (from setting Extention)",
              "Mandatory": "true"
            },
            "Method": {
              "Description": "The method to run in the extention like ExtentionMethod(MethodArgument,Argument)",
              "Mandatory": "true"
            }
          }
        },
        "RunPs1": {
          "Description": "It allow to run a method of a extention that are loaded in settings",
          "Arguments": {
            "Id": {
              "Description": "A number that represant the id of a loaded c# extention (from setting Extention)",
              "Mandatory": "true"
            },
            "Method": {
              "Description": "The method to run in the extention like ExtentionMethod(MethodArgument,Argument)",
              "Mandatory": "true"
            }
          }
        },
        "GetVariable": {
          "Description": "It allow to run a method of a extention that are loaded in settings",
          "Arguments": {
            "Id": {
              "Description": "A number that represant the id of a loaded c# extention (from setting Extention)",
              "Mandatory": "true"
            },
            "Method": {
              "Description": "The method to run in the extention like ExtentionMethod(MethodArgument,Argument)",
              "Mandatory": "true"
            }
          }
        },
        "SetVariable": {
          "Description": "It allow to run a method of a extention that are loaded in settings",
          "Arguments": {
            "Id": {
              "Description": "A number that represant the id of a loaded c# extention (from setting Extention)",
              "Mandatory": "true"
            },
            "Method": {
              "Description": "The method to run in the extention like ExtentionMethod(MethodArgument,Argument)",
              "Mandatory": "true"
            }
          }
        },
        "ShowVariable": {
          "Description": "It allow to run a method of a extention that are loaded in settings",
          "Arguments": {
            "Id": {
              "Description": "A number that represant the id of a loaded c# extention (from setting Extention)",
              "Mandatory": "true"
            },
            "Method": {
              "Description": "The method to run in the extention like ExtentionMethod(MethodArgument,Argument)",
              "Mandatory": "true"
            }
          }
        },
        "YesNoDialog": {
          "Description": "It allow to run a method of a extention that are loaded in settings",
          "Arguments": {
            "Id": {
              "Description": "A number that represant the id of a loaded c# extention (from setting Extention)",
              "Mandatory": "true"
            },
            "Method": {
              "Description": "The method to run in the extention like ExtentionMethod(MethodArgument,Argument)",
              "Mandatory": "true"
            }
          }
        },
        "OkDialog": {
          "Description": "It allow to run a method of a extention that are loaded in settings",
          "Arguments": {
            "Id": {
              "Description": "A number that represant the id of a loaded c# extention (from setting Extention)",
              "Mandatory": "true"
            },
            "Method": {
              "Description": "The method to run in the extention like ExtentionMethod(MethodArgument,Argument)",
              "Mandatory": "true"
            }
          }
        },
        "Browse": {
          "Description": "It allow to run a method of a extention that are loaded in settings",
          "Arguments": {
            "Id": {
              "Description": "A number that represant the id of a loaded c# extention (from setting Extention)",
              "Mandatory": "true"
            },
            "Method": {
              "Description": "The method to run in the extention like ExtentionMethod(MethodArgument,Argument)",
              "Mandatory": "true"
            }
          }
        },
        "LoadPage": {
          "Description": "It allow to run a method of a extention that are loaded in settings",
          "Arguments": {
            "Id": {
              "Description": "A number that represant the id of a loaded c# extention (from setting Extention)",
              "Mandatory": "true"
            },
            "Method": {
              "Description": "The method to run in the extention like ExtentionMethod(MethodArgument,Argument)",
              "Mandatory": "true"
            }
          }
        },
        "ReloadView": {
          "Description": "It allow to run a method of a extention that are loaded in settings",
          "Arguments": {
            "Id": {
              "Description": "A number that represant the id of a loaded c# extention (from setting Extention)",
              "Mandatory": "true"
            },
            "Method": {
              "Description": "The method to run in the extention like ExtentionMethod(MethodArgument,Argument)",
              "Mandatory": "true"
            }
          }
        },
        "ReloadSettings": {
          "Description": "It allow to run a method of a extention that are loaded in settings",
          "Arguments": {
            "Id": {
              "Description": "A number that represant the id of a loaded c# extention (from setting Extention)",
              "Mandatory": "true"
            },
            "Method": {
              "Description": "The method to run in the extention like ExtentionMethod(MethodArgument,Argument)",
              "Mandatory": "true"
            }
          }
        },
        "LoadSetting": {
          "Description": "It allow to run a method of a extention that are loaded in settings",
          "Arguments": {
            "Id": {
              "Description": "A number that represant the id of a loaded c# extention (from setting Extention)",
              "Mandatory": "true"
            },
            "Method": {
              "Description": "The method to run in the extention like ExtentionMethod(MethodArgument,Argument)",
              "Mandatory": "true"
            }
          }
        },
        "GetClipboard": {
          "Description": "It allow to run a method of a extention that are loaded in settings",
          "Arguments": {
            "Id": {
              "Description": "A number that represant the id of a loaded c# extention (from setting Extention)",
              "Mandatory": "true"
            },
            "Method": {
              "Description": "The method to run in the extention like ExtentionMethod(MethodArgument,Argument)",
              "Mandatory": "true"
            }
          }
        },
        "SetClipboard": {
          "Description": "It allow to copy a value to cliboard",
          "Arguments": {
            "String": {
              "Description": "Text you want to copy to cliboard",
              "Mandatory": "true"
            }
          }
        },
        "Exit": {
          "Description": "It allow to exit the application with a exit code",
          "Arguments": {
            "ExitCode": {
              "Description": "A number that represant the exit code of the application by default it throw 0",
              "Mandatory": "false"
            }
          }
        }
      }
    },
    "Powershell": {
      "Description": "Load powershell extention (ps1 file) you could set powershell id using Id=\"12\" property",
      "Values": [
        "C:\\PathToExtetion\\Extention.ps1"
      ]
    }
  },
  "Variable": {
    "System": {
      "{USER}": "This return the user name of logged user",
      "{DEVICE}": "This return the device name",
      "{n}": "This return a \\n (new line in c#)",
      "{AppPath}": "This return the path of application in web format",
      "{AppPathWindows}": "This return the path of application in windows format"
    },
    "User": {
      "[NameOfVariable]": "This return value of a user variable (Like if i have a OkDialog that will return true or false if user abord or click ok on dialog)"
    },
    "Settings": {
      "#TEXT_COLOR#": "Return the color of text in the user interface or application.",
      "#MAIN_COLOR#": "Return the main color used in the user interface or application.",
      "#BACKGROUND_COLOR#": "Return the background color used in the user interface or application.",
      "#FADE_BACKGROUND_COLOR#": "Return the fade background color used in the user interface or application.",
      "#FADE_MAIN_COLOR#": "Return the fade main color used in the user interface or application.",
      "#ITEM_MARGIN#": "Return the margin used for items in the user interface or application.",
      "#MAIN_TEXT_COLOR#": "Return the main color used for text in the user interface or application.",
      "#FONT_NAME#": "Return the font used for text in the user interface or application.",
      "#WINDOWSOPENMODE#": "Return how windows are opened in the user interface or application.",
      "#WINDWOWSRESIZEMODE#": "Return how windows can be resized in the user interface or application.",
      "#SHOWMINIMIZE#": "Return whether the minimize button is shown in window frames.",
      "#SHOWMAXIMIZE#": "Return whether the maximize button is shown in window frames.",
      "#SHOWCLOSE#": "Return whether the close button is shown in window frames.",
      "#WIDTH#": "Return the width of the user interface or application.",
      "#HEIGHT#": "Return the height of the user interface or application.",
      "#PRODUCTION#": "Return whether the application is in production mode."
    }
  },
  "Action": {
    "RunMethod": {
      "Description": "It allow to run a method of a extention that are loaded in settings",
      "Arguments": {
        "Id": {
          "Description2": "A number that represant the id of a loaded c# extention (from setting Extention)",
          "Mandatory": "true"
        },
        "Method": {
          "Description2": "The method to run in the extention like ExtentionMethod(MethodArgument,Argument)",
          "Mandatory": "true"
        }
      }
    },
    "RunPowershell": {
      "Description": "It allow to run a code or function in a loaded powershell script (from setting powershell)",
      "Arguments": {
        "Id": {
          "Description2": "A number that represant the id of a loaded powershell file",
          "Mandatory": "true"
        },
        "Command": {
          "Description2": "Command that will be send in powershell environment like Write-Host \"Test of [Variable]\"; or Function(\"[VariableAsArgument]\");",
          "Mandatory": "true"
        }
      }
    },
    "RunExe": {
      "Description": "It allow to run directly an executable and pass argument to it",
      "Arguments": {
        "Path": {
          "Description2": "Path to executable file you want to run",
          "Mandatory": "true"
        },
        "Argument": {
          "Description2": "Argument pass to executable like \"/Argument /S /Q\"",
          "Mandatory": "false"
        }
      }
    },
    "RunPs1": {
      "Description": "It allow to run a powershell script file .ps1 (not in environment)",
      "Arguments": {
        "Path": {
          "Description2": "Path to ps1 file to run you can also try \"C:\\path\\file.ps1\" -ScriptArgument \"true\" (but it better to use powershell setting to load a script in environment to do that)",
          "Mandatory": "true"
        }
      }
    },
    "GetVariable": {
      "Description": "It allow to read content of variable",
      "Arguments": {
        "Name": {
          "Description2": "The name of variable to read value",
          "Mandatory": "true"
        }
      }
    },
    "SetVariable": {
      "Description": "It allow to set value of a variable (existing one and new one)",
      "Arguments": {
        "Name": {
          "Description2": "A number that represant unique name for variable",
          "Mandatory": "true"
        },
        "Value": {
          "Description2": "The value the varaible will now contain",
          "Mandatory": "true"
        }
      }
    },
    "ShowVariable": {
      "Description": "It allow to show all user variable or specified one using a dialog or not",
      "Arguments": {
        "Id": {
          "Description2": "If it set to Show::All::Id it will show all variable if it a array Var1,Var2 it will show all varaible in array else it will show the variable",
          "Mandatory": "false"
        },
        "ShowDialog": {
          "Description2": "Did you want to show the dialog or not (true/false) it output result in variable",
          "Mandatory": "false"
        }
      }
    },
    "YesNoDialog": {
      "Description": "It show a basic yes/no dialog that return true/false",
      "Arguments": {
        "String": {
          "Description2": "A string to display in dialog",
          "Mandatory": "true"
        }
      }
    },
    "OkDialog": {
      "Description": "It show a basic ok dialog that return true/false",
      "Arguments": {
        "String": {
          "Description2": "A string to display in dialog",
          "Mandatory": "true"
        }
      }
    },
    "Browse": {
      "Description": "Browse file system load or save file or select folder",
      "Arguments": {
        "Type": {
          "Description2": "Select the type of browsing can be \"File\" or \"Folder\"",
          "Mandatory": "true"
        },
        "Mode": {
          "Description2": "That only apply only for Type File the valid value are \"Save\" and \"Load\"",
          "Mandatory": "true"
        },
        "Filter": {
          "Description2": "That only apply only for Type File by default it \"All Files|*.*\" you can apply custom filter to the browser like for xml file: \"Xml Files|*.xml\"",
          "Mandatory": "false"
        }
      }
    },
    "LoadPage": {
      "Description": "It allow to load a new xml page by specifing it path",
      "Arguments": {
        "Path": {
          "Description2": "Path of the xml page to load",
          "Mandatory": "true"
        }
      }
    },
    "ReloadView": {
      "Description": "Reload the view from xml",
      "Arguments": "N/A"
    },
    "ReloadSettings": {
      "Description": "Reload setting from xml",
      "Arguments": "N/A"
    },
    "LoadSetting": {
      "Description": "It allow to configure a setting live (some setting may not load properly)",
      "Arguments": {
        "Name": {
          "Description2": "A string that represant the name of the setting",
          "Mandatory": "true"
        },
        "Value": {
          "Description2": "A string that represent the value of the setting)",
          "Mandatory": "true"
        },
        "Id": {
          "Description2": "If setting allow to have a id define it (like Extention and Powershell)",
          "Mandatory": "false"
        }
      }
    },
    "GetClipboard": {
      "Description": "It allow to get the last line of cliboard",
      "Arguments": "N/A"
    },
    "SetClipboard": {
      "Description": "It allow to copy a value to cliboard",
      "Arguments": {
        "String": {
          "Description2": "Text you want to copy to cliboard",
          "Mandatory": "true"
        }
      }
    },
    "Exit": {
      "Description": "It allow to exit the application with a exit code",
      "Arguments": {
        "ExitCode": {
          "Description2": "A number that represant the exit code of the application by default it throw 0",
          "Mandatory": "false"
        }
      }
    }
  }
}